Mutation is a distinct int and every mutator specifies its own set of values
i.e a seq mutator has SeqGrow, SeqShrink, SeqAdd, SeqDelete, SeqSwap, SeqCrossover.
The function signature is proc (x: var T; m: Mutation; sizeIncreaseHint: int; enforceChanges: bool; r: var Rand): bool
The sampler is passed a (mutation, int (position)) tuple and a weight (0-100) for each possible mutation (canGrow bool).

Pro: Faster mutations (one less copy of the selected item), verified by a previous prototype.
Pro: Easier to calculate sizeIncreaseHint inside mutator?!
Pro/Con: You now have to provide a list with the mutations and the weights for each.
Con: Could produce twice as many duplicates.

Ideas:
- Assign smaller weight for mutating the discriminator field. It could be in accordance to the number of fields that will be zeroed.
- Make the sampler aware of the outcome of the mutation, size increasing mutations could be assigned even numbers, decreasing odds, neutral in multiples of 4. Then the sampler can pick mutations in accordance to the remaining size. Prioritize deleting and remove additions when running out of space. Short of like utility AIs work.
